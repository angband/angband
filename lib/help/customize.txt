====================
Customising the game
====================

Angband supports multiple customizations. These can vary from alternative
methods for selecting objects, keymaps for different commands, changing the
visuals (using graphical tiles), creating subwindows, and saving
customizations for use on future characters.


Squelch settings
================
      
Angband allows you to ignore specific items that you don't want to see
anymore. These items are 'squelched' and any similar items are hidden from
view. There are several ways to squelch an item. The easiest way is to
choose the 's' option when destroying an object. Whenever you destroy an
object you are forced to confirm the destruction. One of the options is
's'. If you use this option, the object is dropped and then hidden from
view.

Weapons and armor have quality squelch options. These allow you to specify
what types of weapons and armor you are no longer interested in seeing.
There is a quality setting for each weapon and armor type. Squelching
weapons and armor by destroying the object will prompt you with a question
about whether you wish to squelch all of that type of armor with a certain
quality setting. These quality settings are described below:

bad
  The weapon/armor has negative AC, to-hit or to-dam.

average
  The weapon/armor has no pluses no minuses.  It is non-magical.

good
  The weapon/armor has positive AC, to-hit or to-dam. However it does not
  have any special abilities, brands, slays, stat-boosts, resistances
 
excellent, with no high resists
  Weapons will have some slays. Armor will have resistances, but these are
  limited to rfire, rcold, racid and relec.

excellent but not splendid
  Weapons and armor may have high resists but they do not have any stat
  boosts or brands.

splendid
  Squelching all splendid items only leaves artifacts unsquelched.

Using Inscriptions
==================

You can inscribe items to change the selection process. Normally when you
select an item from your inventory you must enter a letter that corresponds
to the item. Since the order of your inventory changes as items get added
and removed, you may want to inscribe alternate methods of item selection.
Instead of entering letters, you can enter numbers, and automatically
assign certain items to specific numbers. The way to do this is by using
the inscribe '{' command, which will add an inscription to the item. You
can add an inscription directly to an item or by using the '~' memory
list you can add an auto-inscription. Then every similar item you find from
then on will have that inscription placed on this item.

If you enter a number between 0 and 9, the first item engraved with '@#'
where '#' is the number you entered will be selected. For example, if you
have a shovel engraved with '@0' and you type 'w' (for wield) and then
'0', you will wield the shovel. This is very useful for keymaps (see
below), since you can use this to select an object regardless of its
location in your pack. For example, Angband automatically defines a keymap
for the key 'X' to do 'w0'. If you then engrave both your digging
instrument and your primary weapon with '@0', pressing 'X' will wield
whichever one is not being currently wielded (letting you quickly switch
between them). Multiple numbers can be engraved on the same object; for
example, if a sword is engraved with '@1@0', then either 'w1' or 'w0'
will wield it. Since you may want different items defined with '@0' you
can also make an inscription '@x#' will act like '@#' but only when the
current "Angband command" is 'x'. Thus you can put '@z4' on a rod and
'@u4' on a taff, and then use both 'z4' and 'u4' as desired.

Perhaps the most commonly inscribed items are spellbooks. Casting spells
often takes at least 3 commands. The cast commmand ('m' or 'p') the
book selection and the spell selection. Then you may need to select a
target. For example, if you are a make and the beginner's spellbook is the
first in your inventory, casting 'maa' will cast magic missile. However,
if you lose your spellbook, casting 'maa' will cast the first spell in
whatever new book is in the top of your inventory. This can be a waste in
the best case scenario and exceedingly dangerous in the worst. To avoid
this, it's very useful to inscribe your spellbooks with '@m1', '@m2',
'@m3' etc. Then if you lose your first spellbook and attempt to cast
magic missile by using 'm1a', you will not accidentally select the wrong
spellbook, if the first spellbook is not in your inventory.

You can also use inscriptions to force the game to prompt you on whether or
not you want to use that object. Any object containing '!x' in its
inscription, where 'x' is the current "angband command" (or containing
'!*' for all commands) will induce "verification" whenever that object is
"selected". Thus, inscribing, say, '!v!k!d' on an object will greatly
reduce the odds of you "losing" it by accident, and inscribing '!*' on an
object will allow you to be very paranoid about using the object. Note that
"selling" and "dropping" both use the 'd' command.

User Pref Files
===============

Angband allows you to change various aspects of the game to suit your
tastes. You may define keymaps (changing the way Angband maps your
keypresses to underlying commands), modify the visuals (allowing you to
change the appearance of monsters, objects, or terrain features), change
the colors (allowing you to make a given color brighter, darker, or even
completely different), or set options (turning them off or on).

Angband stores your preferences in files called "user pref files", which
contain comments and "user pref commands", which are simple strings
describing one aspect of the system about which the user has a preference.
There are many ways to load a user pref file, and in fact, some of these
files are automatically loaded for you by the game. All of the files are
kept in the "lib/user/" directory, though you may have to use one of the
command line arguments to redirect this directory, especially on multiuser
systems. You may also enter single user pref commands directly, using the
special "Enter a user pref command" command, activated by "double quote".
You may have to use the "redraw" command ('^R') after changing certain of
the aspects of the game, to allow Angband to adapt to your changes.

When the game starts up, after you have loaded an old character, or created
a new character, some user pref files are loaded automatically. First, the
"pref.prf" file is loaded. This file contains some user pref commands which
will work on all platforms. Then one of 'font-xxx.prf' (for normal usage)
or 'graf-xxx.prf' (for bitmap usage) is loaded. These files contain
attr/char changes to allow the monsters, objects, and/or terrain features
to look "better" on your system. Then the 'pref-xxx.prf' file is loaded.
This file contains pre-defined system specific stuff (keymaps, color
definitions, etc). Then, the 'user-xxx.prf' file is loaded. This file
contains user-defined system specific stuff. The 'user-xxx.prf' file is
used as the "default" user pref file in many places. The 'xxx' is the
"system suffix" for your system, taken from the 'main-xxx.c' file which
was used to generate your executable. Finally, the 'Race.prf',
'Class.prf', and 'Name.prf' files are loaded, where 'Race',
'Class', and 'Name' are replaced by the actual race, class, and name of
the current character.

Several options menu items allow you to load existing user pref files,
create new user pref files, append information to existing user pref files,
and/or interact with various of the user preferences.

Subwindows
==========

In addition to the main window, you can create additional window displays
that have other secondary information on them. You can access the subwindow
menu by using '=' then 'w'. You can select what windows to display. You
may then need to make the window visible using the "window" pull down menu
from the menu bar. There are a variety of subwindow choices and you should
experiment to see which ones are the most useful for you.

User Pref Files (Keymaps)
=========================

The "Interact with keymaps" menu allows you to set up keymaps.  Keymaps map
a single keypress to a series of keypresses.  For example you might map the
key F1 to "maa" (the keypresses to cast "Magic Missile" as a spellcaster).
This can speed up access to commonly-used features.

Keymaps have two parts: the trigger key and the action.  These are written
where possible just as ordinary characters.  However, if modifier keys
(shift, control, etc.) are used then they are encoded as special characters
within curly braces {}.

Possibls modifiers are:
	K = Keypad (for numbers)
	M = Meta (Cmd-key on OS X, alt on most other platforms)
	^ = Control
	S = Shift

If the only modifier is the control key, the curly braces {} aren't included.
For example:

	{^S}& = Control-Shift-S
	^D    = Control-D

Special keys, like F1, F2, or Tab, are all written within square brackets [].
For example:

	^[F1]     = Control-F1
	{^S}[Tab] = Control-Shift-Tab

Special keys include [Escape].

The game will run keymaps in whatever keyset you use (original or roguelike).
So if you write keymaps for roguelike keys and swith to original keys, they 
may not work as you expect!  Keymap actions aren't recursive either, so if you
had a keymap whose trigger was F1, including F1 inside the action wouldn't run
the keymap action again.

When you're running a keymap, you might want to automatically skip any -more-
prompts.  To do this, include whatever commands you want to skip -more- prompts
during with '()'.

Keymaps are written in pref files as:

	A:<action>
	C:<T>:<trigger>

The action must always come first,  <T> means 'keyset Type', which is either
0 for the original keyset or 1 for the roguelike keyset.  For example

	A:maa
	C:0:[F1]

Angband uses a few built-in keymaps.  These are for the movement keys (they
are mapped to ';' plus the number, e.g. '5' -> ';5'), amongst others.  You
can see the full list in pref.prf but they shouldn't impact on you in any way.

To avoid triggering a keymap, you can use the backslash ('\') command.

User Pref Files (Visuals)
=========================

You can use the "Interact with visuals" menu to change various visual
information, currently including the choice of what attr/char values are
used to represent various monsters, objects, or terrain features. Note that
in combination appropriate support in 'main-xxx.c', and with the use of
the "use_graphics" flag, you may be able to specify that "graphic bitmaps"
hould be used instead of normal "colored characters" for various things.

When interactively modifying the attr/char values for monsters, objects, or
terrain features, pressing 'n' or 'N' will change which entry you are
changing, pressing 'a' or 'A' will rotate through the available attr
values, and pressing 'c' or 'C' will rotate though the available char
values. Note that attr/char values with the "high bit" set may induce the
display of special "graphic" pictures if the "use_graphics" flag is set,
and your system supports the "use_graphics" flag.

Note that this menu can be abused in various ways, and if you must do so,
remember that you are only cheating yourself.

Keymaps can be specified in user pref files as lines of the form
'R:<N>:<A>/<C>' or 'K:<N>:<A>/<C>' or 'F:<N>:<A>/<C>' or
'U:<N>:<A>/<C>'.

User Pref Files (Colors)
========================

The "Interact with colors" menu allows you to change the actual internal
values used to display various colors. This command may or may not have any
effect on your machine. Advanced machines may allow you to change the
actual RGB values used to represent each of the 16 colors used by Angband,
and perhaps even allow you to define new colors which are not currently
used by Angband.

Colors can be specified in user pref files as lines of the form
'V:<N>:<V>:<R>:<G>:<B>'.

User Pref Files (Options)
=========================

The "Interact with options" command allows you to turn options on or off.
You may turn options off or on using the user pref commands of the form
'X:<option>' or 'Y:<option>' respectively.

